// Generated by CoffeeScript 1.3.1
(function() {
  var getCreated;

  getCreated = function(id) {
    return prettyDate(parseInt(id.slice(0, 8), 16) * 1000) || "Unknown";
  };

  define(["smog/server", "templates/collection", "smog/notify"], function(server, templ, notify) {
    return function(_arg) {
      var findAll, handleChange, name, realname, setup, task;
      name = _arg.name, task = _arg.task;
      realname = name.toLowerCase();
      findAll = function(cb) {
        return server.collection({
          collection: realname,
          type: 'find',
          query: {},
          options: {
            limit: 1000
          }
        }, function(err, docs) {
          var doc, formatted, _i, _j, _len, _len1;
          if (err != null) {
            return notify.error("Error retrieving documents: " + err);
          }
          if (docs.length >= 999) {
            notify.alert("Document limit reached - only displaying first 1000");
          }
          formatted = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = docs.length; _i < _len; _i++) {
              doc = docs[_i];
              _results.push({
                id: doc._id,
                value: doc,
                created: getCreated(doc._id)
              });
            }
            return _results;
          })();
          for (_i = 0, _len = formatted.length; _i < _len; _i++) {
            doc = formatted[_i];
            delete doc.value._id;
          }
          for (_j = 0, _len1 = formatted.length; _j < _len1; _j++) {
            doc = formatted[_j];
            doc.value = JSON.stringify(doc.value, null, 4);
          }
          $('#content').html(templ({
            name: name,
            documents: formatted
          }));
          return cb();
        });
      };
      handleChange = function(value) {
        var val;
        try {
          val = JSON.parse(value);
          val._id = this.getAttribute('id');
          server.collection({
            collection: realname,
            type: 'update',
            query: val
          }, function(err) {
            if (err != null) {
              return notify.error("Error saving document: " + err);
            }
            return notify.success("Document saved!");
          });
          return value;
        } catch (err) {
          return notify.error("Invalid JSON: " + err);
        }
      };
      setup = function() {
        $('#datagrid').dataTable({
          sDom: "<'row'<'span6'l><'span6'f>r>t<'row'<'span6'i><'span6'p>>",
          sPaginationType: "bootstrap",
          sScrollX: "100%",
          bScrollCollapse: true,
          bStateSave: true,
          bAutoWidth: true,
          oLanguage: {
            sLengthMenu: "_MENU_ records per page"
          }
        });
        $(window).bind('resize', function() {
          return $('#datagrid').dataTable().fnAdjustColumnSizing();
        });
        return $('#datagrid').dataTable().fnAdjustColumnSizing();
      };
      return findAll(setup);
    };
  });

}).call(this);
